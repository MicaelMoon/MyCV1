@page "/"
@using Common.Models
@using MyCV1.Components.Layout
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<style>
	.container {
		display: flex;
	}

	.column {
		flex: 1;
		padding: 10px;
	}
</style>
		
<AuthorizeView>
	<div class="sticky-top">
		@foreach (Admin admin in admins)
		{
			if (context.User.Identity?.Name == admin.Name)
			{
				registeredAdmin = admin;
				<button class="btn @(ToggleNavMenu ? "btn-success" : "btn-danger")" @onclick="ToggleAdminView">Admin view</button>
				break;
			}
		}
		@if (ToggleNavMenu)
		{
			<a href="Account/Manage">Account</a>
			<a href="AddNewSkill">Add skill</a>
			<a href="auth">Auth Required</a>
		}
	</div>
</AuthorizeView>
<div class="container">
	<div class="column">
		YOOOOOOOOOOOOOOOOOOOOOOO
	</div>
	<div class="column">
		TOOOOOOOOOOOOOOOOOOOOOOOOOOOO
	</div>
</div>

<div>
	<h1 id="CVName">Micael Sjödin</h1>
	<h5 id="CVTitle">.NET CLOUD DEVELOPER</h5>
</div>
<div>
	<h3 id="CVOccupationLabel">Current occupation</h3>
	<h5 id="CVOccupationText">Studying</h5>
	<h6 id="CVOccupationTitle">.Net Cloud Developer | IT-högskolan</h6>
	<h7 id="CVOccupationDescription">Learning the hole cycle of creating applitaions using primary the tools within .NET, <br /> from coding all the way to publishing</h7>
</div>
<div>
	<h3 id="CVWorkExperienceLabel">Work experience</h3>
	<div>
		<h5>Kitchen Porter</h5>
		<h6>Grand Curiosa hotell | Mars 2023 - present</h6>
		<ul>
			<li>Responsebility for delivery, dishes, kitchen cleaning <br />amomg with being open to help staff <br />with all kinds of tasks across the hotel when needed</li>
		</ul>
	</div>
</div>

<div>
	<h3>Educations</h3>
	<h5>Göteborgs Folkhögskola</h5>
	<h6>Fundamental High school competence | Aug 2021 - June 2022</h6>
	<h5>Hermods</h5>
	<h6>Programming 1 | June 2022 - Sep 2022</h6>
</div>

<div>
	<h3>Skills</h3>
	<ui>
		<hr />
		@foreach (Skill skill in skills)
		{
			<h5>@skill.Name <br /></h5>
			<h6>Description: @skill.Description <br /></h6>
			<h6>Years: @skill.Time<br /></h6>
			<h6>Experience level: @skill.ExperienceLevel<br /></h6>
			<hr />
		}
	</ui>
</div>
<div>
	<h3>Projects</h3>
	<ui>
		<hr/>
		@foreach (Project project in projects)
		{
			<h5>@project.Name <br/></h5>
			<h6>@project.Description</h6>
			<hr/>
		}
	</ui>
</div>
<div>
	<a href="https://www.linkedin.com/in/micael-sj%C3%B6din-240aba289/" target="_blank">Linkedin</a>
	<a href="https://github.com/MicaelMoon" target="_blank">Github</a>
</div>
<AuthorizeView>
	<Authorized>
		@if (registeredAdmin != null)
		{
			<div>
				<h3>Add Skill</h3>
				<label for="titleInput">Title</label>
				<input id="titleInput" @bind="title" @bind:event="oninput"/>
				<label for="descriptionInput">Description</label>
				<input id="descriptionInput" @bind="description" @bind:event="oninput"/>
				<label for="timeInput">Time</label>
				<input id="timeInput" @bind="time" @bind:event="oninput"/>
				<button class="btn btn-primary" @onclick="SubmitBtn">Submit</button>
			</div>
			<!--			<EditForm Model="@newSkill">
				<div>
					<label for="newSkillName">Title</label>
					<InputText id="newSkillName" @bind-Value="newSkill.Name"></InputText>
					<label for="newSkillDescription">Title</label>
					<InputText id="newSkillDescription" @bind-Value="newSkill.Description"></InputText>
					<label for="newSkillTime">Title</label>
					<InputText id="newSkillTime" @bind-Value="newSkill.Time"></InputText>
					<button class="btn btn-primary" @onclick="AddNewSkill"></button>
				</div>
			</EditForm>
			-->

			<hr/>
			<div>
				@foreach (Skill skill in skills)
				{
					<div>
						<label>@skill.Name</label>
						<button>Delete</button>
					</div>
				}
			</div>
		}
	</Authorized>
</AuthorizeView>


@code {
	private Skill newSkill = new Skill();

	private string title;
	private string description;
	private string time;

	private Admin registeredAdmin;

	private bool ToggleNavMenu = false;

	private List<Skill> skills = new List<Skill>();
	private List<Admin> admins = new List<Admin>();
	private List<Project> projects = new List<Project>();

	protected override async Task OnInitializedAsync()
	{
		HttpClient http = HttpClientFactory.CreateClient();

		try
		{
			var responseSkills = await http.GetAsync("https://localhost:7237/api/skills");
			var responseAdmins = await http.GetAsync("https://localhost:7237/api/admins");
			var responseProjects = await http.GetAsync("https://localhost:7237/api/projects");

			if (responseSkills.IsSuccessStatusCode)
			{
				skills = await responseSkills.Content.ReadFromJsonAsync<List<Skill>>();
			}
			else
			{
				string errorMessage = $"Error: {responseSkills.StatusCode}";
			}

			if (responseAdmins.IsSuccessStatusCode)
			{
				admins = await responseAdmins.Content.ReadFromJsonAsync<List<Admin>>();

			}
			else
			{
				string errorMessage = $"Error: {responseAdmins.StatusCode}";
			}

			if (responseProjects.IsSuccessStatusCode)
			{
				 projects= await responseProjects.Content.ReadFromJsonAsync<List<Project>>();

			}
			else
			{
				string errorMessage = $"Error: {responseProjects.StatusCode}";
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
	}

	private async Task SubmitBtn()
	{
		var newSkill = new Skill { Name = title, Description = description, Time = time };

		HttpClient http = HttpClientFactory.CreateClient();

		var json = JsonSerializer.Serialize(newSkill);
		using var content = new StringContent(json, Encoding.UTF8, "application/json");

		await http.PostAsync("https://localhost:7237/api/skill", content);
	}

	private async Task AddNewSkill()
	{

	}

	private void ToggleAdminView()
	{
		ToggleNavMenu = !ToggleNavMenu;
	}
}