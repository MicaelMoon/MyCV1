@page "/"
@using Common.Models
@using MyCV1.Components.Layout
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<div class="container">
	<AuthorizeView>
		<div class="sticky-top">
			@foreach (Admin admin in admins)
			{
				if (context.User.Identity?.Name == admin.Name)
				{
					<button class="btn @(ToggleNavMenu ? "btn-success" : "btn-danger")" @onclick="ToggleAdminView">Admin view</button>
					break;
				}
			}
			@if (ToggleNavMenu)
			{
				<a href="Account/Manage">Account</a>
				<a href="AddNewSkill">Add skill</a>
				<a href="auth">Auth Required</a>
			}
		</div>
	</AuthorizeView>
</div>

<div>
	<h1>Micael Sjödin</h1>
	<h5>.NET CLOUD DEVELOPER</h5>
</div>
<div>
	<h3>Current occupation</h3>
	<h5>Studying</h5>
	<h6>.Net Cloud Developer | IT-högskolan</h6>
	<h7>Learning the hole cycle of creating applitaions using primary the tools within .NET, <br /> from coding all the way to publishing</h7>
</div>
<div>
	<h3>Work experience</h3>
	<div>
		<h5>Kitchen Porter</h5>
		<h6>Grand Curiosa hotell | Mars 2023 - present</h6>
		<ul>
			<li>Responsebility for delivery, dishes, kitchen cleaning <br />amomg with being open to help staff <br />with all kinds of tasks across the hotel when needed</li>
		</ul>
	</div>
</div>

<div>
	<h3>Educations</h3>
	<h5>Göteborgs Folkhögskola</h5>
	<h6>Fundamental High school competence | Aug 2021 - June 2022</h6>
	<h5>Hermods</h5>
	<h6>Programming 1 | June 2022 - Sep 2022</h6>
</div>

<div>
	<h3>Skills</h3>
	<ui>
		<hr />
		@foreach (Skill skill in skills)
		{
			<h5>@skill.Name <br /></h5>
			<h6>Description: @skill.Description <br /></h6>
			<h6>Years: @skill.Time<br /></h6>
			<hr />
		}
	</ui>
</div>
<AuthorizeView>
	<div>
		<h3>Add Skill</h3>
		<label for="titleInput">Title</label>
		<input id="titleInput" @bind="title" @bind:event="oninput" />
		<label for="descriptionInput">Description</label>
		<input id="descriptionInput" @bind="description" @bind:event="oninput" />
		<label for="timeInput">Time</label>
		<input id="timeInput" @bind="time" @bind:event="oninput" />
		<button class="btn btn-primary" @onclick="SubmitBtn">Submit</button>
	</div>	
</AuthorizeView>


@code {
	private string title;
	private string description;
	private string time;

	private bool ToggleNavMenu = false;

	private List<Skill> skills = new List<Skill>();
	private List<Admin> admins = new List<Admin>();

	protected override async Task OnInitializedAsync()
	{
		HttpClient http = HttpClientFactory.CreateClient();

		try
		{
			var responseSkills = await http.GetAsync("https://localhost:7237/api/skills");

			if (responseSkills.IsSuccessStatusCode)
			{
				skills = await responseSkills.Content.ReadFromJsonAsync<List<Skill>>();
			}
			else
			{
				string errorMessage = $"Error: {responseSkills.StatusCode}";
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}

		try
		{

			var responseAdmins = await http.GetAsync("https://localhost:7237/api/admins");

			if (responseAdmins.IsSuccessStatusCode)
			{
				admins = await responseAdmins.Content.ReadFromJsonAsync<List<Admin>>();

			}
			else
			{
				string errorMessage = $"Error: {responseAdmins.StatusCode}";
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
	}

	private async Task SubmitBtn()
	{
		var newSkill = new Skill { Name = title, Description = description, Time = time };

		HttpClient http = HttpClientFactory.CreateClient();

		var json = JsonSerializer.Serialize(newSkill);
		using var content = new StringContent(json, Encoding.UTF8, "application/json");

		await http.PostAsync("https://localhost:7237/api/skill", content);
	}

	private void ToggleAdminView()
	{
		ToggleNavMenu = !ToggleNavMenu;
	}
}